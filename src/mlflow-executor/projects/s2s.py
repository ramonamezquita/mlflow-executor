from typing import TypedDict

from anyforecast import project


class Seq2SeqParameters(TypedDict):
    group_cols: str
    datetime: str
    target: str
    time_varying_known: str | None
    time_varying_unknown: str | None
    static_categoricals: str | None
    static_reals: str | None
    max_prediction_length: int
    max_encoder_length: int
    freq: str
    device: str
    max_epochs: int
    verbose: int


class Seq2SeqProject(project.MLflowProject):
    """Handles end-to-end training and deployment of Seq2Seq model.


    Parameters
    ----------
    group_ids : str
        [Comma separated] Column names identifying a time series.

    datetime : str, default="datetime"
        Datetime column. The ``group_ids`` columns together with
        the ``datetime`` uniquely identify each sample/row.

    target : str, default="target"
        Target column.

    max_epochs : int, default=10
        The number of epochs to train for each :meth:`fit` call. Note that you
        may keyboard-interrupt training at any time.

    verbose : int, default=1
        This parameter controls how much print output is generated by
        the net and its callbacks. By setting this value to 0, e.g. the
        summary scores at the end of each epoch are no longer printed.
    """

    def __init__(
        self,
        group_cols: str,
        datetime: str,
        target: str,
        time_varying_known: str | None = None,
        time_varying_unknown: str | None = None,
        static_categoricals: str | None = None,
        static_reals: str | None = None,
        max_prediction_length: int = 6,
        max_encoder_length: int = 24,
        freq: str = "D",
        device: str = "cpu",
        max_epochs: int = 10,
        verbose: int = 1,
    ):
        super().__init__(uri=project.create_script_uri("seq2seq"))

        self.group_cols = group_cols
        self.datetime = datetime
        self.target = target
        self.time_varying_known = time_varying_known
        self.time_varying_unknown = time_varying_unknown
        self.static_categoricals = static_categoricals
        self.static_reals = static_reals
        self.max_prediction_length = max_prediction_length
        self.max_encoder_length = max_encoder_length
        self.freq = freq
        self.device = device
        self.max_epochs = max_epochs
        self.verbose = verbose

    def get_parameters(self) -> Seq2SeqParameters:
        return Seq2SeqParameters(
            group_cols=self.group_cols,
            datetime=self.datetime,
            target=self.target,
            time_varying_known=self.time_varying_known,
            time_varying_unknown=self.time_varying_unknown,
            static_categoricals=self.static_categoricals,
            static_reals=self.static_reals,
            max_prediction_length=self.max_prediction_length,
            max_encoder_length=self.max_encoder_length,
            freq=self.freq,
            device=self.device,
            max_epochs=self.max_epochs,
            verbose=self.verbose,
        )
